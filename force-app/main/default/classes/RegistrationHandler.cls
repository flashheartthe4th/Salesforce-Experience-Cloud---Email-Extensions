//TODO:This autogenerated class includes the basics for a Registration
//Handler class. You will need to customize it to ensure it meets your needs and
//the data provided by the third party.

global class RegistrationHandler implements Auth.RegistrationHandler {

    private Blob profileImage;

    global boolean canCreateUser(Auth.UserData data) {
        //TODO: Check whether we want to allow creation of a user with this data
        //Set<String> s = new Set<String>{'usernamea', 'usernameb', 'usernamec'};
        //if(s.contains(data.username)) {
            //return true;
        //}
        return true;
    }

    public String getPictureURL(Auth.UserData data) {
        //Sync the user's picture
        String pictureUrl = null;
        if (data.provider == 'Facebook') {
            pictureUrl = 'https://graph.facebook.com/' + data.identifier + '/picture?type=large';
        } else if (data.provider == 'LinkedIn'){
            pictureUrl = data.attributeMap.get('picture-url');
        } else {
            pictureUrl = data.attributeMap.get('picture');
        }
        system.debug(pictureUrl);
        return pictureUrl;
    }

    public Blob getExternalProfilePhoto(Auth.UserData data) {
        String pictureURL = getPictureURL(data);
        HttpRequest req = new HttpRequest(); 
        req.setEndpoint(pictureUrl); 
        req.setMethod('GET');
        HttpResponse res = HttpHandler.callEndPoint(req);
        return res.getBodyAsBlob();
    }

    public void setProfilePhoto(String communityId,String userId,Blob image) {
        ConnectApi.Photo photo = ConnectApi.UserProfiles.setPhoto(communityId, userId, new ConnectApi.BinaryInput(image, 'image/jpeg', 'userImage.jpeg'));
    }

    global User createUser(Id portalId, Auth.UserData data){
        if(!canCreateUser(data)) {
            //Returning null or throwing an exception fails the SSO flow
            return null;
        }
        if(data.attributeMap.containsKey('sfdc_networkid')) {
            profileImage = getExternalProfilePhoto(data);

            //check exisiting
            User[] existingUser = [SELECT Id FROM User WHERE Email = :data.email];
            if(existingUser.size()==1) {
                updateUser(existingUser[0].Id, portalId, data);
                return existingUser[0];
            }

            //We have a community id, so create a user with community access
            //TODO: Get an actual account
            Account a = new Account();
            a.Name = data.fullName;
            insert a; 

            Contact c = new Contact();
            c.accountId = a.Id;
            c.email = data.email;
            c.firstName = data.firstName;
            c.lastName = data.lastName;
            insert(c);

            //TODO: Customize the username and profile. Also check that the username doesn't already exist and
            //possibly ensure there are enough org licenses to create a user. Must be 80 characters or less.
            User u = new User();
            Profile p = [SELECT Id FROM profile WHERE name='Customer Community User'];
            u.username = data.email;
            u.email = data.email;
            u.lastName = data.lastName;
            u.firstName = data.firstName;
            String alias = u.username;
            //Alias must be 8 characters or less
            if(alias.length() > 8) {
                alias = alias.substring(0, 8);
            }
            u.alias = alias;
            u.languagelocalekey = 'en_US';
            u.localesidkey = UserInfo.getLocale();
            u.emailEncodingKey = 'UTF-8';
            u.timeZoneSidKey = 'Europe/London';
            u.profileId = p.Id;
            u.contactId = c.Id;
            return u;
        } else {
            //This is not a community, so create a regular standard user
            User u = new User();
            Profile p = [SELECT Id FROM profile WHERE name='Standard User'];
            //TODO: Customize the username. Also check that the username doesn't already exist and
            //possibly ensure there are enough org licenses to create a user. Must be 80 characters
            //or less.
            u.username = data.username + '@myorg.com';
            u.email = data.email;
            u.lastName = data.lastName;
            u.firstName = data.firstName;
            String alias = data.username;
            //Alias must be 8 characters or less
            if(alias.length() > 8) {
                alias = alias.substring(0, 8);
            }
            u.alias = alias;
            u.languagelocalekey = UserInfo.getLocale();
            u.localesidkey = UserInfo.getLocale();
            u.emailEncodingKey = 'UTF-8';
            u.timeZoneSidKey = 'America/Los_Angeles';
            u.profileId = p.Id;
            return u;
        }
    }

    global void updateUser(Id userId, Id portalId, Auth.UserData data){
        
        profileImage = getExternalProfilePhoto(data);

        User u = new User(id=userId);
        //TODO: Customize the username. Must be 80 characters or less.
        //u.username = data.username + '@myorg.com';
        //u.email = data.email;
        //u.lastName = data.lastName;
        //u.firstName = data.firstName;
        //String alias = data.username;
        //Alias must be 8 characters or less
        //if(alias.length() > 8) {
            //alias = alias.substring(0, 8);
        //}
        //u.alias = alias;

        //setProfilePhoto(data.attributeMap.get('sfdc_networkid'), userId, profileImage);

        //update(u);
    }
}